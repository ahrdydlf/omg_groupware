<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- fileupload:  -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"/>
		<!--  1024*1024*50  -->
		<property name="maxUploadSize"  value="52428800"/>
		<property name="maxInMemorySize" value="52428800"/>
	</bean>	
		
	
	<!-- 트랜젝션 처리 -->
   <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  	    <property name="dataSource" ref="datasource"/>
   </bean>
   
   <!-- 트랜잭션 advice 설정 -->
   <tx:advice id="txAdvice" transaction-manager="transactionManager">
   	  <tx:attributes>
   	  	<!-- do으로 시작하는 모든 메소드는 read-only="false" 트랜잭션관리 대상 -->
   	  	<tx:method name="do*" read-only="false"/>
   	  </tx:attributes>
   </tx:advice>
   
   <aop:config>  
      <aop:pointcut expression="execution(* com.omg..service.*Impl.*(..))" id="txPointCut"/>
      <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
   </aop:config>
	
	<!-- javax.mail.PasswordAuthentication -->
	<bean id="passwordAuth" class="javax.mail.PasswordAuthentication">
		<constructor-arg index="0">
			<value>casse2045@naver.com</value>
		</constructor-arg>
		<constructor-arg index="1">
			<value>dbql2549..</value>
		</constructor-arg>
	</bean>
	<!-- //javax.mail.PasswordAuthentication -->
	
	<!-- Authenticator -->
	<bean id="authenticator" class="javax.mail.Authenticator">
		<lookup-method name="getPasswordAuthentication"
			bean="passwordAuth" />
	</bean>
	<!-- //Authenticator -->
	
	<!-- Session -->
	<bean id="emailSession" class="javax.mail.Session">
		<constructor-arg index="0">
			<props>
				<prop key="mail.smtp.host">smtp.naver.com</prop>
				<prop key="mail.smtp.port">465</prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.ssl.enable">true</prop>
				<prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
				<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
			</props>
		</constructor-arg>
		<constructor-arg index="1" ref="authenticator" />
	</bean>
	<!-- //Session -->
	
	<!-- JavaMailSenderImpl : 운영 (mail 보내기) -->
	<bean id="mailSenderImpl"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="session" ref="emailSession" />
	</bean>
	<!-- //JavaMailSenderImpl : 운영 (mail 보내기) -->
	
	<!-- 매일 실행될 타겟 메서드 -->
<!-- 	<bean id="methodInvokingJobDetailFactoryBean" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		주기적인 Job처리 대상 bean
		<property name="targetObject" ref="commutingServiceImpl"/>
		실행할 메소드
		<property name="targetMethod" value="doInit"/>
		동시 실행 방지
		<property name="concurrent" value="false"/>
	</bean>
	
	<bean id="cronTriggerFactoryBean" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
	  <property name="jobDetail" ref="methodInvokingJobDetailFactoryBean"></property>
	  주중 8: 30분
	  <property name="cronExpression" value="0 30 8 ? * MON,TUE,WED,THU,FRI *"></property>
	  <property name="cronExpression" value="0 40 19 ? * SUN *"></property>
	</bean>

	스케줄러
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	    <property name="triggers">
	    	트리거 등록
	    	<list><ref bean="cronTriggerFactoryBean"/> </list>
	    </property>
	</bean> -->
	
	<bean id="commutingServiceImpl" class="com.omg.commuting.service.CommutingServiceImpl">
		<property name="commutingDao" ref="commutingDaoImpl"></property>
	</bean>
	
	<bean id="commutingDaoImpl" class="com.omg.comutting.dao.CommutingDaoImpl">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate"></property>
	</bean>
	
	
	
	<!-- Locale : 사용자언어, 국가, 정보가 들어가 있는 경우 -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
		<property name="defaultLocale" value="ko"></property>
	</bean>
	
	<!-- 다국어 처리 + Message -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message.messageSource</value>
			</list>
		</property>
	</bean>
	
	<!-- 예외처리 -->
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" >
		<property name="exceptionMappings">
			<props>
				<!-- nullPointerException -->
				<prop key="java.lang.NullPointerException">
					common/nullPointerError
				</prop>
				<!-- illegalArgumentException -->
				<prop key="java.lang.IllegalArgumentException">
					common/illegalArgumentException
				</prop>
			</props>
			
		</property>
		
		<!-- Default : Error -->
		<property name="defaultErrorView" value="common/error"/>
	 </bean>
	 
	<!-- dao mapper에 sql 샐힝 class -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
	 </bean>
		
	<!-- mybatis -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:config/mybatis-config.xml"/>
		<property name="mapperLocations" value="classpath:mappers/**/*.xml"/>
		<property name="dataSource" ref="datasource"></property>
	</bean>	
	
	
	<!-- database properties 파일 -->
	<context:property-placeholder location="classpath:config/database.properties" />
	<!-- dataSource -->
	<bean id="datasource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 최대 접속 허용 갯수 -->
		<property name="maxActive" value="10" />
		<!-- 여분으로 남겨질 Connection 갯수 -->
		<property name="maxIdle" value="8" />
		<!-- DB연결이 반환되는 Timeout = -1(무한대기) -->
		<property name="maxWait" value="30000" />
		<!-- Connection이 잘못 관리되어 버려진 연결을 찾아 재활용 -->
		<property name="removeAbandoned" value="true"></property>
		<!-- 버려진 연결로 인식할 기본 시간(초) -->
		<property name="removeAbandonedTimeout" value="60" />
	</bean>	
	<!-- jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="datasource"></property>
	</bean>
	
</beans>
